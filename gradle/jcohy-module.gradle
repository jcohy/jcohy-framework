apply plugin: 'io.spring.dependency-management'
apply from: "$rootDir/gradle/publications.gradle"
apply plugin: 'java'
apply plugin: 'java-library'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
//	compile "org.springframework.boot:spring-boot-starter-aop"
//	compile "org.springframework.retry:spring-retry"
//	testCompile "org.springframework.boot:spring-boot-starter-test"
//	developmentOnly("org.springframework.boot:spring-boot-devtools")
//	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
	testCompile "org.junit.jupiter:junit-jupiter-engine"
}

tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

jar {
	manifest.attributes["Implementation-Title"] = project.name
	manifest.attributes["Implementation-Version"] = project.version
	manifest.attributes["Automatic-Module-Name"] = project.name.replace('-', '.')
	// for Jigsaw
	manifest.attributes["Created-By"] =
			"${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"

	from("${rootDir}/src/docs/dist") {
		include "license.txt"
		include "notice.txt"
		into "META-INF"
		expand(copyright: new Date().format("yyyy"), version: project.version)
	}
}

normalization {
	runtimeClasspath {
		ignore "META-INF/MANIFEST.MF"
	}
}

javadoc {
	description = "Generates project-level javadoc for use in -javadoc jar"

	options.encoding = "UTF-8"
	options.charSet = "UTF-8"
	options.memberLevel = JavadocMemberLevel.PROTECTED
	options.author = true
	options.header = project.description
	options.use = true
	options.links = [
			"https://docs.oracle.com/javase/8/docs/api/",
			"https://docs.oracle.com/javaee/7/api/",
			"https://docs.spring.io/spring-framework/docs/5.2.7.RELEASE/javadoc-api/",
			"https://docs.spring.io/spring-security/site/docs/5.2.5.RELEASE/api/",
			"https://docs.spring.io/spring-data/jpa/docs/2.2.8.RELEASE/api/",
			"https://docs.spring.io/spring-security/site/docs/5.3.2.RELEASE/api/",
	] as String[]
	options.addStringOption("Xdoclint:none", "-quiet")

	// Suppress warnings due to cross-module @see and @link references.
	// Note that global 'api' task does display all warnings.
	logging.captureStandardError LogLevel.INFO
	logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
}

task sourcesJar(type: Jar, dependsOn: classes) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
	// Don't include or exclude anything explicitly by default. See SPR-12085.
}

task javadocJar(type: Jar) {
	archiveClassifier.set("javadoc")
	from javadoc
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
}

test {
	useJUnitPlatform()
}
